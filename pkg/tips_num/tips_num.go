/*
数値
*/

package tips_num

import (
	"fmt"
	"math"
	"math/rand"
	"strconv"
	"time"
)

//---------------------------------------------------
// 2進数・8進数・16進数で数値を扱うには
//---------------------------------------------------
/* Goには2進数リテラルはありません。8(0始まり)と16(0x始まり)はあり。*/
// import "strconv"

func num_Base() {
	i2, _ := strconv.ParseInt("10000", 2, 0)
	fmt.Println(i2)          // =>"16"
	fmt.Printf("%d\n", 020)  // =>"16"
	fmt.Printf("%d\n", 0x10) // =>"16"
}

//---------------------------------------------------
// 数値を2進数・8進数・16進数表現の文字列に変換するには
//---------------------------------------------------
func num_Format() {
	s := ""
	s = fmt.Sprintf("%b", 255)
	fmt.Println(s) // => "11111111"
	s = fmt.Sprintf("%o", 255)
	fmt.Println(s) // => "11111111"
	s = fmt.Sprintf("%x", 255)
	fmt.Println(s) // => "ff"
}

//---------------------------------------------------
//任意のビット位置の値を参照する
//---------------------------------------------------
func num_RefBit() {
	i := 0x10
	fmt.Println(refbit(i, 0)) // => "0"
	fmt.Println(refbit(i, 4)) // => "1"
}

//任意のビット位置の値を参照する
func refbit(i int, b uint) int {
	return (i >> b) & 1
}

//---------------------------------------------------
// 除算の商と余りを求める
//---------------------------------------------------
func num_Mod() {
	i := 10
	d := i / 3
	m := i % 3
	fmt.Println(d, m) // => 3,1
}

//---------------------------------------------------
// 絶対値を求める
//---------------------------------------------------
func num_Abs() {
	// import "math"
	i := -5
	fmt.Println(math.Abs(float64(i))) // => "5"

	i = 100
	fmt.Println(math.Abs(float64(i))) // =>"100"
}

//---------------------------------------------------
// 小数を切り上げ・切り捨て・四捨五入するには
//---------------------------------------------------
// import "math"

func num_CeilFloor() {
	f := 3.4
	fmt.Println(math.Ceil(f))  // =>"4"
	fmt.Println(math.Trunc(f)) // =>"3"
	fmt.Println(round(f))      // =>"3" Roundはないらしい
	f = 3.5
	fmt.Println(round(f)) // =>"4"
}

// 丸め
func round(f float64) float64 {
	return math.Floor(f + .5)
}

//---------------------------------------------------
// 三角関数を計算する
//---------------------------------------------------
func num_SinCos() {
	fmt.Println(math.Sin(math.Pi / 2)) // => "1"
	fmt.Println(math.Cos(0))           // => "1"
	fmt.Println(math.Tan(0))           // => "0"
}

//---------------------------------------------------
// 対数を計算する
//---------------------------------------------------
func num_Log() {
	fmt.Println(math.Log(math.E)) // => "1"
	fmt.Println(math.Log10(10))   // => "1"
}

//---------------------------------------------------
// 平方根を求める
//---------------------------------------------------
func num_Sqrt() {
	fmt.Println(math.Sqrt(100)) // => "10"
	fmt.Println(math.Sqrt(10))  // => "3.1622776601683795"
}

//---------------------------------------------------
// 擬似乱数を生成する
//---------------------------------------------------
/*
Seedの与え方は[こちら](http://qiita.com/cubicdaiya/items/819886c57e9d17e4b019)。

Intn(100)は[0,100)の乱数を返します。
*/
//  import "time"
//  import "math/rand"

func num_Rand() {

	rand.Seed(time.Now().UnixNano()) //Seed

	fmt.Println(rand.Float32())
	fmt.Println(rand.Intn(100))
}

//---------------------------------------------------
// 整数と浮動小数を相互変換する（精度の変換）
//---------------------------------------------------
func num_Conv() {
	i := 1
	f := float64(i)
	fmt.Printf("%d, %f\n", i, f)

	f = 3.0
	i = int(f)
	fmt.Printf("%d, %f\n", i, f)
}

//---------------------------------------------------
// 数値
//---------------------------------------------------
func Tips_num() {
	num_Base()      // 2進数・8進数・16進数で数値を扱うには
	num_Format()    // 数値を2進数・8進数・16進数表現の文字列に変換するには
	num_RefBit()    // 任意のビット位置の値を参照する
	num_Mod()       // 除算の商と余りを求める
	num_Abs()       // 絶対値を求める
	num_CeilFloor() // 小数を切り上げ・切り捨て・四捨五入するには
	num_SinCos()    // 三角関数を計算する
	num_Log()       // 対数を計算する
	num_Sqrt()      // 平方根を求める
	num_Rand()      // 擬似乱数を生成する
	num_Conv()      // 整数と浮動小数を相互変換する（精度の変換）

}
